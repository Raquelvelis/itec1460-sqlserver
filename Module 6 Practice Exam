-- List all products with categoryName and SupplierName
SELECT 
    p.ProductName, c.CategoryName, s.CompanyName 
    AS SupplierName
FROM 
    Products p
JOIN 
    Categories c ON p.CategoryID = c.CategoryID
JOIN 
    Suppliers s 
    ON p.SupplierID = s.SupplierID;

-- SQL JOINs Find all customers who have never placed an order
SELECT 
    c.CustomerID, c.CompanyName
FROM 
    Customers c
LEFT JOIN 
    Orders o 
    ON c.CustomerID = o.CustomerID
WHERE 
    o.OrderID IS NULL;

-- GROUP BY List the Top 5 employees by total sales amount
SELECT TOP 5
     e.EmployeeID, e.FirstName, e.LastName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    Employees e
JOIN 
    Orders o 
    ON e.EmployeeID = o.EmployeeID
JOIN
    [Order Details] od 
    ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
ORDER BY 
    TotalSales 
DESC;

-- Insert Statement: 
INSERT INTO 
    Products 
    (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, 
    UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued)
VALUES 
    ('Northwind Coffee', 1, 1, '10 boxes x 20 bags', 18.00, 
    39, 0, 10, 0);

-- SQL Update Statement: Increase the UnitPrice of all products in the "Beverages" category by 10%.
UPDATE
     Products
SET 
    UnitPrice = UnitPrice * 1.10
WHERE 
    CategoryID = (SELECT CategoryID 
    FROM Categories WHERE CategoryName = 'Beverages');

-- SQL Insert and Delete Statements:
-- First, insert into Orders table
DECLARE 
    @Today datetime;
SET
    @Today = GETDATE();
INSERT INTO 
    Orders (CustomerID, EmployeeID, OrderDate, RequiredDate)
VALUES  
    ('VINET', 1, @Today, DATEADD(day, 7, @Today));

-- Get the new OrderID to use in the delete statement
DECLARE 
    @NewOrderID int;
SET 
    @NewOrderID = SCOPE_IDENTITY();

DELETE FROM --Delete the order just created
    Orders
WHERE 
    OrderID = @NewOrderID;

--Create a new table named "ProductReviews" with the following columns:
--ReviewID (int, primary key)
--ProductID (int, foreign key referencing Products table)
--CustomerID (nchar(5), foreign key referencing Customers table)
--Rating (int)
--ReviewText (nvarchar(max))
--ReviewDate (datetime)
CREATE TABLE ProductReviews2 (
    ReviewID int PRIMARY KEY,
    ProductID int FOREIGN KEY REFERENCES Products(ProductID),
    CustomerID nchar(5) FOREIGN KEY REFERENCES Customers(CustomerID),
    Rating int,
    ReviewText nvarchar(max),
    ReviewDate datetime
);

--Create a view named "vw_ProductSales" that shows ProductName, CategoryName, and TotalSales (sum of UnitPrice * Quantity) for each product

CREATE VIEW 
    w_ProductSales AS
SELECT 
        p.ProductName, c.CategoryName, 
        SUM(od.UnitPrice * od.Quantity) AS TotalSales
FROM   
    Products p
JOIN 
    Categories c 
    ON p.CategoryID = c.CategoryID
JOIN 
    [Order Details] od 
    ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductName, c.CategoryName;

-- Write a stored procedure named "sp_TopCustomersByCountry" that takes a country name as input and returns the top 3 customers by total order amount for that country.
CREATE PROCEDURE 
    sp_TopCustomersByCountry
    @CountryName nvarchar(15)
AS
BEGIN
    SELECT TOP 3 
            c.CustomerID, c.CompanyName, 
            SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalAmount
    FROM 
        Customers c
    JOIN 
        Orders o 
        ON c.CustomerID = o.CustomerID
    JOIN 
        [Order Details] od 
        ON o.OrderID = od.OrderID
    WHERE 
        c.Country = @CountryName
    GROUP BY 
        c.CustomerID, c.CompanyName
    ORDER BY 
        TotalAmount 
        DESC;
END;

-- Write a query to find the employee who has processed orders for the most unique products. Display the EmployeeID, FirstName, LastName, and the count of unique products they've processed.

SELECT TOP 1 
    e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT od.ProductID) AS UniqueProductsCount
FROM 
    Employees e
JOIN 
    Orders o 
    ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od 
    ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
ORDER BY 
    UniqueProductsCount 
    DESC;

